/*
 * AUdit Trail
 *
 * This is an Audit Trail service.

 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	business "mingo/audit/business"
	model "mingo/audit/model"
	"net/http"

	"gopkg.in/go-playground/validator.v9"
)

type RestSvcImpl struct {
	auditTrail business.AuditTrail
}

func (restSvc *RestSvcImpl) AddEvent(w http.ResponseWriter, r *http.Request) {
	var ev model.Event
	data, err := ioutil.ReadAll(r.Body)
	if err == nil && data != nil {
		err = json.Unmarshal(data, &ev)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
		err = restSvc.auditTrail.AddEvent(ev)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			for _, e := range err.(validator.ValidationErrors) {
				fmt.Fprint(w, e)
			}
		} else {
			fmt.Fprintf(w, "Event: %+v", ev)
		}
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	}

}

func (restSvc *RestSvcImpl) FindByType(w http.ResponseWriter, r *http.Request) {
	fmt.Println("FindByType")
	var query model.EventQuery
	query.EventType = r.URL.Query().Get("eventType")
	query.StartDate = r.URL.Query().Get("startDate")
	query.EndDate = r.URL.Query().Get("endDate")
	events, err := restSvc.auditTrail.GetEvents(query)
	fmt.Print("events size: ")
	fmt.Println(len(events))
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
	}

	json.NewEncoder(w).Encode(events)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
}

func AddEvent(w http.ResponseWriter, r *http.Request) {
	var restSvc RestSvcImpl
	restSvc.auditTrail = business.GetAuditTrail()
	restSvc.AddEvent(w, r)
}

func FindByType(w http.ResponseWriter, r *http.Request) {
	var restSvc RestSvcImpl
	restSvc.auditTrail = business.GetAuditTrail()
	restSvc.FindByType(w, r)
}

func Free() {
	auditTrail := business.GetAuditTrail()
	auditTrail.Free()
}
